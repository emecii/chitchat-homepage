{"version":3,"file":"static/js/609.19131374.chunk.js","mappings":"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","sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { notification } from \"antd\";\r\nimport axios from \"axios\";\r\n\r\nexport const useForm = (validate: any) => {\r\n  const [values, setValues] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    message: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({});\r\n  const [shouldSubmit, setShouldSubmit] = useState(false);\r\n\r\n  const openNotificationWithIcon = () => {\r\n    notification[\"success\"]({\r\n      message: \"Success\",\r\n      description: \"Your message has been sent!\",\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async (event: React.ChangeEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    setErrors(validate(values));\r\n\r\n    const apiKey = process.env.REACT_APP_RAPID_API_KEY;\r\n    const url = \"\";\r\n    if (Object.values(values).every((x) => x !== \"\")) {\r\n      // Configure the email sending options\r\n      const options = {\r\n        method: 'POST',\r\n        url: 'https://mail-sender-api1.p.rapidapi.com/',\r\n        headers: {\r\n          'content-type': 'application/json',\r\n          'X-RapidAPI-Key': apiKey,\r\n          'X-RapidAPI-Host': 'mail-sender-api1.p.rapidapi.com'\r\n        },\r\n        data: {\r\n          sendto: 'evan@chitchat-ai.com',\r\n          ishtml: 'false',\r\n          title: values.email + ' - ' + values.name + ' - is interested in Chitchat',\r\n          body: 'Message: ' + values.message + '\\n\\n' + 'Email: ' + values.email + '\\n\\n' + 'Name: ' + values.name + '\\n\\n'\r\n        }\r\n      };\r\n  \r\n      try {\r\n        const response = await axios.request(options);\r\n        console.log(response.data);\r\n        setShouldSubmit(true); // Set form submit state on successful email send\r\n        // Additional logic for handling success (like resetting the form) goes here\r\n      } catch (error) {\r\n        console.error(error);\r\n        // Handle errors (like showing an error message) here\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(errors).length === 0 && shouldSubmit) {\r\n      setValues((values) => (values = { name: \"\", email: \"\", message: \"\" }));\r\n      openNotificationWithIcon();\r\n    }\r\n  }, [errors, shouldSubmit]);\r\n\r\n  const handleChange = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    event.persist();\r\n    setValues((values) => ({\r\n      ...values,\r\n      [event.target.name]: event.target.value,\r\n    }));\r\n    setErrors((errors) => ({ ...errors, [event.target.name]: \"\" }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values,\r\n    errors,\r\n  };\r\n};\r\n","import { validateProps } from \"../../common/types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin-top: 1.5rem;\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 700px;\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 400px;\r\n`;\r\n","import { withTranslation, TFunction } from \"react-i18next\";\r\nimport { Container, TextWrapper, Content } from \"./styles\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: string;\r\n  t: TFunction;\r\n}\r\n\r\nconst Block = ({ title, content, t }: Props) => {\r\n  return (\r\n    <Container>\r\n      <h6>{t(title)}</h6>\r\n      <TextWrapper>\r\n        <Content>{t(content)}</Content>\r\n      </TextWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Block);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875rem;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n  margin-bottom: -0.625rem;\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: none;\r\n  font-size: 0.875rem;\r\n  height: 185px;\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 10px;\r\n  text-transform: capitalize;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledInput\r\n      placeholder={t(placeholder)}\r\n      name={name}\r\n      id={name}\r\n      onChange={onChange}\r\n    />\r\n  </Container>\r\n);\r\n\r\nexport default withTranslation()(Input);\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst TextArea = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <StyledContainer>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledTextArea\r\n      placeholder={t(placeholder)}\r\n      id={name}\r\n      name={name}\r\n      onChange={onChange}\r\n    />\r\n  </StyledContainer>\r\n);\r\n\r\nexport default withTranslation()(TextArea);\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  padding: 5rem 0;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 3rem 0;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  width: 100%;\r\n  max-width: 520px;\r\n\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: rgb(255, 130, 92);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Slide, Zoom } from \"react-awesome-reveal\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Block from \"../Block\";\r\nimport Input from \"../../common/Input\";\r\nimport TextArea from \"../../common/TextArea\";\r\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\r\n\r\nconst Contact = ({ title, content, id, t }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit } = useForm(validate);\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type as keyof typeof errors];\r\n    return (\r\n      <Zoom direction=\"left\">\r\n        <Span>{ErrorMessage}</Span>\r\n      </Zoom>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ContactContainer id={id}>\r\n      <Row justify=\"space-between\" align=\"middle\">\r\n        <Col lg={12} md={11} sm={24} xs={24}>\r\n          <Slide direction=\"left\" triggerOnce>\r\n            <Block title={title} content={content} />\r\n          </Slide>\r\n        </Col>\r\n        <Col lg={12} md={12} sm={24} xs={24}>\r\n          <Slide direction=\"right\" triggerOnce>\r\n            <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  placeholder=\"Your Name\"\r\n                  value={values.name || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"name\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  placeholder=\"Your Email\"\r\n                  value={values.email || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"email\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <TextArea\r\n                  placeholder=\"Your Message\"\r\n                  value={values.message || \"\"}\r\n                  name=\"message\"\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"message\" />\r\n              </Col>\r\n              <ButtonContainer>\r\n                <Button name=\"submit\">{t(\"Submit\")}</Button>\r\n              </ButtonContainer>\r\n            </FormGroup>\r\n          </Slide>\r\n        </Col>\r\n      </Row>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Contact);\r\n"],"names":["useForm","validate","_useState","useState","name","email","message","_useState2","_slicedToArray","values","setValues","_useState3","_useState4","errors","setErrors","_useState5","_useState6","shouldSubmit","setShouldSubmit","handleSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","event","options","response","wrap","_context","prev","next","preventDefault","process","Object","every","x","method","url","headers","data","sendto","ishtml","title","body","axios","request","sent","console","log","t0","error","stop","_x","apply","arguments","useEffect","keys","length","notification","description","handleChange","persist","_objectSpread","_defineProperty","target","value","test","Content","styled","_templateObject","_taggedTemplateLiteral","Container","_templateObject2","TextWrapper","_templateObject3","withTranslation","content","t","_jsxs","children","_jsx","StyledInput","StyledContainer","StyledTextArea","Label","placeholder","onChange","htmlFor","id","ContactContainer","FormGroup","Span","ButtonContainer","_templateObject4","_useForm","ValidationType","_ref2","type","ErrorMessage","Zoom","direction","Row","justify","align","Col","lg","md","sm","xs","Slide","triggerOnce","Block","autoComplete","onSubmit","span","Input","TextArea","Button"],"sourceRoot":""}