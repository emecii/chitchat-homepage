{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { notification } from \"antd\";\nimport axios from \"axios\";\nexport const useForm = validate => {\n  _s();\n  const [values, setValues] = useState({\n    name: \"\",\n    email: \"\",\n    message: \"\"\n  });\n  const [errors, setErrors] = useState({});\n  const [shouldSubmit, setShouldSubmit] = useState(false);\n  const openNotificationWithIcon = () => {\n    notification[\"success\"]({\n      message: \"Success\",\n      description: \"Your message has been sent!\"\n    });\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setErrors(validate(values));\n    const apiKey = process.env.REACT_APP_API_KEY;\n    const url = \"\";\n    if (Object.values(values).every(x => x !== \"\")) {\n      // Configure the email sending options\n      const options = {\n        method: 'POST',\n        url: 'https://mail-sender-api1.p.rapidapi.com/',\n        headers: {\n          'content-type': 'application/json',\n          'X-RapidAPI-Key': apiKey,\n          'X-RapidAPI-Host': 'mail-sender-api1.p.rapidapi.com'\n        },\n        data: {\n          sendto: 'evan@chitchat-ai.com',\n          ishtml: 'false',\n          title: values.email + ' - ' + values.name + ' - is interested in Chitchat',\n          body: 'Message: ' + values.message + '\\n\\n' + 'Email: ' + values.email + '\\n\\n' + 'Name: ' + values.name + '\\n\\n'\n        }\n      };\n      try {\n        const response = await axios.request(options);\n        console.log(response.data);\n        setShouldSubmit(true); // Set form submit state on successful email send\n        // Additional logic for handling success (like resetting the form) goes here\n      } catch (error) {\n        console.error(error);\n        // Handle errors (like showing an error message) here\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && shouldSubmit) {\n      setValues(values => values = {\n        name: \"\",\n        email: \"\",\n        message: \"\"\n      });\n      openNotificationWithIcon();\n    }\n  }, [errors, shouldSubmit]);\n  const handleChange = event => {\n    event.persist();\n    setValues(values => ({\n      ...values,\n      [event.target.name]: event.target.value\n    }));\n    setErrors(errors => ({\n      ...errors,\n      [event.target.name]: \"\"\n    }));\n  };\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors\n  };\n};\n_s(useForm, \"PzeaH78dr39MtgsUoeIylhi4Bow=\");","map":{"version":3,"names":["useState","useEffect","notification","axios","useForm","validate","_s","values","setValues","name","email","message","errors","setErrors","shouldSubmit","setShouldSubmit","openNotificationWithIcon","description","handleSubmit","event","preventDefault","apiKey","process","env","REACT_APP_API_KEY","url","Object","every","x","options","method","headers","data","sendto","ishtml","title","body","response","request","console","log","error","keys","length","handleChange","persist","target","value"],"sources":["/Users/emecii/Workspace/landy-react-template/src/common/utils/useForm.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { notification } from \"antd\";\r\nimport axios from \"axios\";\r\n\r\nexport const useForm = (validate: any) => {\r\n  const [values, setValues] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    message: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({});\r\n  const [shouldSubmit, setShouldSubmit] = useState(false);\r\n\r\n  const openNotificationWithIcon = () => {\r\n    notification[\"success\"]({\r\n      message: \"Success\",\r\n      description: \"Your message has been sent!\",\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async (event: React.ChangeEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    setErrors(validate(values));\r\n    const apiKey = process.env.REACT_APP_API_KEY;\r\n    const url = \"\";\r\n    if (Object.values(values).every((x) => x !== \"\")) {\r\n      // Configure the email sending options\r\n      const options = {\r\n        method: 'POST',\r\n        url: 'https://mail-sender-api1.p.rapidapi.com/',\r\n        headers: {\r\n          'content-type': 'application/json',\r\n          'X-RapidAPI-Key': apiKey,\r\n          'X-RapidAPI-Host': 'mail-sender-api1.p.rapidapi.com'\r\n        },\r\n        data: {\r\n          sendto: 'evan@chitchat-ai.com',\r\n          ishtml: 'false',\r\n          title: values.email + ' - ' + values.name + ' - is interested in Chitchat',\r\n          body: 'Message: ' + values.message + '\\n\\n' + 'Email: ' + values.email + '\\n\\n' + 'Name: ' + values.name + '\\n\\n'\r\n        }\r\n      };\r\n  \r\n      try {\r\n        const response = await axios.request(options);\r\n        console.log(response.data);\r\n        setShouldSubmit(true); // Set form submit state on successful email send\r\n        // Additional logic for handling success (like resetting the form) goes here\r\n      } catch (error) {\r\n        console.error(error);\r\n        // Handle errors (like showing an error message) here\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(errors).length === 0 && shouldSubmit) {\r\n      setValues((values) => (values = { name: \"\", email: \"\", message: \"\" }));\r\n      openNotificationWithIcon();\r\n    }\r\n  }, [errors, shouldSubmit]);\r\n\r\n  const handleChange = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    event.persist();\r\n    setValues((values) => ({\r\n      ...values,\r\n      [event.target.name]: event.target.value,\r\n    }));\r\n    setErrors((errors) => ({ ...errors, [event.target.name]: \"\" }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values,\r\n    errors,\r\n  };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}